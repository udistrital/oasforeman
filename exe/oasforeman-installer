#!/usr/bin/env ruby

# Esta es una version menos flexible
# pero mas especifica para las necesidades de OAS
# es como un comando `foreman-installer` pero desatendido

require "fileutils"
require "yaml/store"
require "hiera"
require "yaml"
require "bundler/setup"
require "oasforeman"
require "optparse"
require "oasforeman/installer"

config_paths = [ "#{Dir.home/.oasforemand}" ]

if Process.uid == 0
  if File.exists? "/etc/oasforemand"
    config_paths.push "/etc/oasforemand"
  end
end

config_path = config_paths.pop

if File.exists? config_path
  FileUtils.mkdir_p config_path
end

exit 0

option = {}
OptionParser.new do |opts|
  opts.on("--hiera-scope YAML", "In YAML format") do |value|
    options[:"hiera-scope"] = value
  end
end.parse!

if not options[:"hiera-scope"]
  raise "--hiera-scope required"
end

yaml_hiera_scope = YAML.parse(options[:"hiera-scope"]||"---")

if not yaml_hiera_scope.respond_to? :to_ruby
  raise "Wrong --hiera-scope option."
end

hiera_scope = yaml_hiera_scope.to_ruby

if not hiera_scope.kind_of? Hash or not hiera_scope["environment"]
  raise "We need at least 'environment' in the scope, fix --hiera-scope option."
end

hiera = Hiera.new
lookup = hiera.lookup "oasforeman-installer::options", nil, hiera_scope, nil, :hash
state = YAML::Store.new "#{Dir.home}/.oasforeman-state"

state.transaction do
  if state["oasforeman-installer::options"] == lookup
    puts "State not changed, nothing to do."
    break
  end
  oasforeman_installer = OasforemanInstaller.new lookup
  oasforeman_installer.run
  puts "State changed, saving new state."
  state["oasforeman-installer::options"] = lookup
end
